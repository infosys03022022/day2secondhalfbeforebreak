1) Open the github link

https://github.com/infosys03022022/day2

2) Download the zip file

3) Extract the zip file.

4) We need to access it from the eclipse IDE.
File------> Import -------> General---------> Existing project into workspace----> clicking on 
next button----->browsing the project folder

-----------------------------------------------
* Command Line arguements

-----------------------------------------------------
In Object oriented programming the basic concept starts with class and object.

Class is just like a blueprint/template.
object is basically is an instance of a class or it is bringing class into existence.

// So the Employee class is a template and it saying that we are creating a user defined
// data type with a name Employee and it is having attributes or properties like id and basic
   public class Employee {
     int id=1;
     int basic=12000;
   }
// But the above class has no use until unless we go for creating an object of the class

   public class Employee {
     public static void main(String args[]){
     Employee emp=new Employee();
     System.out.println(emp.id);
     System.out.println(emp.basic);        
    }
  }
  
---------------------------------------------------------------------------------------------------
/* Whenever we design a class we have two things:
*  Member variables
*  Member methods
** method naming convention , if a method is with single word , entire word in smallcase.
** method consist of multiple words the first word will be in smallecase, rest of the words
   will have the first character in uppercase and rest of the character in lowercase.
   Same concept goes for variable also. */

  package infosys.day2.demo.classobject;

  public class Employee {
    int employeeId;
    int employeeBasic;  // id and basic are member variables of Employee class

  // setData() and displayData() are member methods of Employee class
    void setData(){
      employeeId=1;
      employeeBasic=12000;
     }
 
    void displayData(){
     System.out.println(employeeId);
     System.out.println(employeeBasic);
     }

    public static void main(String args[]) {
     Employee emp=new Employee(); 
     emp.setData();  // storing the id and basic
     emp.displayData(); // displaying the id and basic
     }
 
  }   
         
 

 
 


------------------------------------------------------

Data types in Java are classified into two types:

Primitive—which include char,byte,short,int,long
Non-primitive—which include Classes, Interfaces, and Arrays.



Type	Size	Range of values that can be stored
byte	1 byte	−128 to 127
short	2 bytes	−32768 to 32767
int	4 bytes	−2,147,483,648 to 2,147,483,647
long	8 bytes	9,223,372,036,854,775,808 to 9,223,372,036,854,755,807
float	4 bytes	3.4e−038 to 3.4e+038
double	8 bytes	1.7e−308 to 1.7e+038
char    2 bytes  It has a minimum value of 
                 ‘u0000’ (or 0) and a maximum value of ‘uffff’ (or 65,535, inclusive)
boolean 1 bit    true or false





Java Tokens
A token is the smallest element in a program that is meaningful to the compiler. 
These tokens define the structure of the language. The Java token set can be divided 
into five categories: Identifiers, Keywords, Literals, Operators, and Separators.

1. Identifiers
Identifiers are names provided by you. These can be assigned to variables, methods, functions, classes etc. to uniquely identify them to the compiler.

2. Keywords
Keywords are reserved words that have a specific meaning for the compiler. They cannot be used as identifiers. Java has a rich set of keywords. Some examples are: boolean, char, if, protected, new, this, try, catch, null, threadsafe etc.
keywords

S.No	Keyword	Usage
1.	abstract	Specifies that a class or method will be implemented later, in a subclass 
2.	assert	        Assert describes a predicate placed in a java program to indicate that the developer thinks that the predicate is always true at that place.
3. 	boolean  	A data type that can hold True and False values only 
4.	break	        A control statement for breaking out of loops.
5.	byte	        A data type that can hold 8-bit data values 
6.	case	        Used in switch statements to mark blocks of text
7.	catch	        Catches exceptions generated by try statements
8.	char 	        A data type that can hold unsigned 16-bit Unicode characters
9.	class	        Declares a new class
10.	continue	Sends control back outside a loop 
11.	default	        Specifies the default block of code in a switch statement
12.	do	        Starts a do-while loop
13.	double	        A data type that can hold 64-bit floating-point numbers
14.	else	        Indicates alternative branches in an if statement 
15.	enum	        A Java keyword is used to declare an enumerated type. Enumerations extend the base class.
16.	extends	        Indicates that a class is derived from another class or interface 
17.	final   	Indicates that a variable holds a constant value or that a method will not be overridden
18.	finally	        Indicates a block of code in a try-catch structure that will always be executed
19.	float	        A data type that holds a 32-bit floating-point number 
20.	for	        Used to start a for loop
21.	if	        Tests a true/false expression and branches accordingly
22.	implements	Specifies that a class implements an interface 
23.	import   	References other classes
24.	instanceof	Indicates whether an object is an instance of a specific class or implements an interface 
25.	int	        A data type that can hold a 32-bit signed integer 
26.	interface	Declares an interface
27.	long	        A data type that holds a 64-bit integer
28.	native	        Specifies that a method is implemented with native (platform-specific) code 
29.	new	        Creates new objects 
30.	null	        Indicates that a reference does not refer to anything 
31.	package	        Declares a Java package
32.	private  	An access specifier indicating that a method or variable may be accessed only in the class it’s declared in
33.	protected	An access specifier indicating that a method or variable may only be accessed in the class it’s declared in (or a subclass of the class it’s declared in or other classes in the same package)
34.	public	        An access specifier used for classes, interfaces, methods, and variables indicating that an item is accessible throughout the application (or where the class that defines it is accessible)
35.	return	        Sends control and possibly a return value back from a called method 
36.	short	        A data type that can hold a 16-bit integer 
37	static	        Indicates that a variable or method is a class method (rather than being limited to one particular object)
38.	strictfp	A Java keyword is used to restrict the precision and rounding of floating-point calculations to ensure portability.
39.	super	        Refers to a class’s base class (used in a method or class constructor) 
40.	switch	        A statement that executes code based on a test value 
41.	synchronized	Specifies critical sections or methods in multithreaded code
42.	this	        Refers to the current object in a method or constructor 
43.	throw 	        Creates an exception 
44.	throws	        Indicates what exceptions may be thrown by a method 
45.	transient	Specifies that a variable is not part of an object’s persistent state
46.	try	        Starts a block of code that will be tested for exceptions 
47.	void	        Specifies that a method does not have a return value
48.	volatile	This indicates that a variable may change asynchronously
49.	while	        Starts a while loop





3. Literals
Literals are variables whose values remain constant throughout the program. 
They are also called Constants. 

4. Operators
An operator is a symbol that operates on one or more operands to produce a result.

They will be discussed in greater detail in the next article.

5. Separators
Separators are symbols that indicate the division and arrangement of groups of code. The structure and function of code is generally defined by the separators. The separators used in Java are as follows:

parentheses ( )
Used to define precedence in expressions, to enclose parameters in method definitions, and enclosing cast types.
braces { }
Used to define a block of code and to hold the values of arrays.
brackets [ ]
Used to declare array types.
semicolon ;
Used to separate statements.
comma ,
Used to separate identifiers in a variable declaration and in the for statement.
period .
Used to separate package names from classes and subclasses and to separate a variable or
 a method from a reference variable.
